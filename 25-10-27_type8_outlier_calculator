<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>R Type 8 Outlier Calculator</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        'gemini-blue': '#1A73E8',
                        'gemini-light': '#E8F0FE',
                        'interquartile': '#34A853',
                        'outlier-red': '#EA4335'
                    },
                    fontFamily: {
                        sans: ['Inter', 'sans-serif'],
                    },
                }
            }
        }
    </script>
    <style>
        body {
            background-color: #f8fafc;
            font-family: 'Inter', sans-serif;
        }
        .card {
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
        }
        .code-output {
            background-color: #1e293b;
            color: #f1f5f9;
            word-break: break-all;
        }
    </style>
</head>
<body class="p-4 md:p-8">
    <div class="max-w-4xl mx-auto">
        <header class="text-center mb-8">
            <h1 class="text-4xl font-extrabold text-gray-800">
                Outlier Detector: R Type 8 Quantile Method
            </h1>
            <p class="text-lg text-gray-600 mt-2">
                Calculate outliers using the Type 8 quantile definition based on Hyndman, R. J., & Fan, Y. (1996). Sample Quantiles in Statistical Packages. The American Statistician, 50(4), 361â€“365. https://doi.org/10.1080/00031305.1996.10473566
            </p>
        </header>

        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
            <div class="bg-white p-6 rounded-xl card">
                <h2 class="text-2xl font-semibold text-gray-700 mb-4">1. Input Your Data</h2>
                <textarea 
                    id="dataInput" 
                    rows="10" 
                    placeholder="Enter your numbers here, separated by spaces, commas, or newlines. E.g.: 88, 92, 95, 105, 5, 208"
                    class="w-full p-3 border-2 border-gray-300 rounded-lg focus:border-gemini-blue focus:ring-gemini-blue transition duration-150"
                >88, 92, 95, 98, 101, 105, 107, 109, 110, 5, 200, 208</textarea>
                
                <button 
                    id="calculateBtn" 
                    onclick="calculateOutliers()"
                    class="mt-4 w-full bg-gemini-blue text-white font-bold py-3 rounded-lg hover:bg-blue-700 transition duration-150 text-lg"
                >
                    Calculate Outliers
                </button>
            </div>

            <div class="bg-white p-6 rounded-xl card">
                <h2 class="text-2xl font-semibold text-gray-700 mb-4">2. Results & Fences (Max 15 Decimal Precision)</h2>
                <div id="resultsDisplay" class="space-y-4">
                    <p class="text-gray-500 italic">Press 'Calculate Outliers' to see the results.</p>
                </div>
            </div>
        </div>
    </div>

    <script>
        const PRECISION = 15;

        function quantileType8(data, p) {
            const n = data.length;
            if (n === 0) return NaN;
            
            // k = p * (n - 1) + 1 (1-based index)
            const k = p * (n - 1) + 1;
            
            const i = Math.floor(k);
            const f = k - i;

            if (i < 1) return data[0];
            if (i >= n) return data[n - 1];

            const x_i = data[i - 1];
            const x_i_plus_1 = data[i];

            return x_i + f * (x_i_plus_1 - x_i);
        }

        function parseInput(input) {
            const cleaned = input.replace(/[,;\n\t]/g, ' ').replace(/\s+/g, ' ').trim();
            if (!cleaned) return [];

            const numbers = cleaned.split(' ')
                                   .map(Number)
                                   .filter(n => isFinite(n));

            return numbers.sort((a, b) => a - b);
        }

        function formatNumber(num) {
            let s = num.toFixed(PRECISION);
            s = s.replace(/0+$/, ''); // Trim trailing zeros
            s = s.replace(/\.$/, ''); // Trim trailing decimal point
            return s;
        }


        function calculateOutliers() {
            const inputElement = document.getElementById('dataInput');
            const resultsElement = document.getElementById('resultsDisplay');
            const rawInput = inputElement.value;
            
            const sortedData = parseInput(rawInput);

            if (sortedData.length < 4) {
                resultsElement.innerHTML = `
                    <p class="text-outlier-red font-semibold">Error: Need at least 4 data points to calculate quartiles (n=${sortedData.length}).</p>
                `;
                return;
            }

            const Q1 = quantileType8(sortedData, 0.25);
            const Q3 = quantileType8(sortedData, 0.75);
            const IQR_value = Q3 - Q1;
            const k_value = 1.5;
            const lowerFence = Q1 - (k_value * IQR_value);
            const upperFence = Q3 + (k_value * IQR_value);
            const outliers = sortedData.filter(n => n < lowerFence || n > upperFence);
            
            const outlierListHtml = outliers.length > 0
                ? `<div class="code-output p-3 rounded-lg overflow-x-auto text-sm">
                       <span class="font-mono">${outliers.map(formatNumber).join(', ')}</span>
                   </div>`
                : `<p class="text-interquartile font-semibold">No outliers found outside the 1.5 &times; IQR range.</p>`;

            resultsElement.innerHTML = `
                <div class="space-y-3">
                    <div class="bg-gray-50 p-4 rounded-lg border border-gray-200">
                        <p class="font-bold text-lg text-gray-800 mb-2">Summary Statistics (Type 8 Quantile)</p>
                        <div class="flex flex-wrap gap-4 text-sm">
                            <span class="font-mono bg-gemini-light text-gemini-blue px-2 py-1 rounded">Q1: ${formatNumber(Q1)}</span>
                            <span class="font-mono bg-gemini-light text-interquartile px-2 py-1 rounded">IQR: ${formatNumber(IQR_value)}</span>
                            <span class="font-mono bg-gemini-light text-gemini-blue px-2 py-1 rounded">Q3: ${formatNumber(Q3)}</span>
                        </div>
                    </div>

                    <div class="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
                        <p class="font-bold text-lg text-gray-800 mb-2">Outlier Fences (k=1.5)</p>
                        <p class="text-sm text-gray-700 mb-2">Values outside this range are considered outliers (1.5 &times; IQR):</p>
                        <div class="flex flex-col sm:flex-row gap-2 sm:gap-4 text-sm">
                            <span class="font-mono bg-yellow-100 text-yellow-800 px-2 py-1 rounded">Lower Fence: ${formatNumber(lowerFence)}</span>
                            <span class="font-mono bg-yellow-100 text-yellow-800 px-2 py-1 rounded">Upper Fence: ${formatNumber(upperFence)}</span>
                        </div>
                    </div>

                    <div>
                        <p class="font-bold text-xl text-outlier-red mb-2">Total Outliers Detected (${outliers.length} found):</p>
                        ${outlierListHtml}
                    </div>
                </div>
            `;
        }

        document.addEventListener('DOMContentLoaded', calculateOutliers);
    </script>
</body>
</html>